// Generated by gencpp from file points_msgs/points_density_array.msg
// DO NOT EDIT!


#ifndef POINTS_MSGS_MESSAGE_POINTS_DENSITY_ARRAY_H
#define POINTS_MSGS_MESSAGE_POINTS_DENSITY_ARRAY_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <points_msgs/points_density.h>

namespace points_msgs
{
template <class ContainerAllocator>
struct points_density_array_
{
  typedef points_density_array_<ContainerAllocator> Type;

  points_density_array_()
    : points_density_array()  {
    }
  points_density_array_(const ContainerAllocator& _alloc)
    : points_density_array(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::points_msgs::points_density_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::points_msgs::points_density_<ContainerAllocator> >::other >  _points_density_array_type;
  _points_density_array_type points_density_array;





  typedef boost::shared_ptr< ::points_msgs::points_density_array_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::points_msgs::points_density_array_<ContainerAllocator> const> ConstPtr;

}; // struct points_density_array_

typedef ::points_msgs::points_density_array_<std::allocator<void> > points_density_array;

typedef boost::shared_ptr< ::points_msgs::points_density_array > points_density_arrayPtr;
typedef boost::shared_ptr< ::points_msgs::points_density_array const> points_density_arrayConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::points_msgs::points_density_array_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::points_msgs::points_density_array_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace points_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'points_msgs': ['/home/ee904-i5-old-pc-1/Desktop/Kenny/catkin_ws/src/points_msgs/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::points_msgs::points_density_array_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::points_msgs::points_density_array_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::points_msgs::points_density_array_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::points_msgs::points_density_array_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::points_msgs::points_density_array_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::points_msgs::points_density_array_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::points_msgs::points_density_array_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b858f0c0e7e13b1ca36b528932bc5670";
  }

  static const char* value(const ::points_msgs::points_density_array_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb858f0c0e7e13b1cULL;
  static const uint64_t static_value2 = 0xa36b528932bc5670ULL;
};

template<class ContainerAllocator>
struct DataType< ::points_msgs::points_density_array_<ContainerAllocator> >
{
  static const char* value()
  {
    return "points_msgs/points_density_array";
  }

  static const char* value(const ::points_msgs::points_density_array_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::points_msgs::points_density_array_<ContainerAllocator> >
{
  static const char* value()
  {
    return "points_density[] points_density_array\n\
================================================================================\n\
MSG: points_msgs/points_density\n\
int32 points_num \n\
float32 points_int\n\
float64 dist_num \n\
";
  }

  static const char* value(const ::points_msgs::points_density_array_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::points_msgs::points_density_array_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.points_density_array);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct points_density_array_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::points_msgs::points_density_array_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::points_msgs::points_density_array_<ContainerAllocator>& v)
  {
    s << indent << "points_density_array[]" << std::endl;
    for (size_t i = 0; i < v.points_density_array.size(); ++i)
    {
      s << indent << "  points_density_array[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::points_msgs::points_density_<ContainerAllocator> >::stream(s, indent + "    ", v.points_density_array[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // POINTS_MSGS_MESSAGE_POINTS_DENSITY_ARRAY_H
