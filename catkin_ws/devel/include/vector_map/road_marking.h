// Generated by gencpp from file vector_map/road_marking.msg
// DO NOT EDIT!


#ifndef VECTOR_MAP_MESSAGE_ROAD_MARKING_H
#define VECTOR_MAP_MESSAGE_ROAD_MARKING_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace vector_map
{
template <class ContainerAllocator>
struct road_marking_
{
  typedef road_marking_<ContainerAllocator> Type;

  road_marking_()
    : id(0)
    , lane_id(0)
    , category(0)
    , w_id(0)  {
    }
  road_marking_(const ContainerAllocator& _alloc)
    : id(0)
    , lane_id(0)
    , category(0)
    , w_id(0)  {
  (void)_alloc;
    }



   typedef int32_t _id_type;
  _id_type id;

   typedef int32_t _lane_id_type;
  _lane_id_type lane_id;

   typedef int32_t _category_type;
  _category_type category;

   typedef int32_t _w_id_type;
  _w_id_type w_id;





  typedef boost::shared_ptr< ::vector_map::road_marking_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::vector_map::road_marking_<ContainerAllocator> const> ConstPtr;

}; // struct road_marking_

typedef ::vector_map::road_marking_<std::allocator<void> > road_marking;

typedef boost::shared_ptr< ::vector_map::road_marking > road_markingPtr;
typedef boost::shared_ptr< ::vector_map::road_marking const> road_markingConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::vector_map::road_marking_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::vector_map::road_marking_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace vector_map

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'vector_map': ['/home/ee904-i5-old-pc-1/Desktop/Kenny/catkin_ws/src/vector_map/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::vector_map::road_marking_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::vector_map::road_marking_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::vector_map::road_marking_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::vector_map::road_marking_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vector_map::road_marking_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vector_map::road_marking_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::vector_map::road_marking_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b23ce3f5a689c4f090cba80b81e2e4b9";
  }

  static const char* value(const ::vector_map::road_marking_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb23ce3f5a689c4f0ULL;
  static const uint64_t static_value2 = 0x90cba80b81e2e4b9ULL;
};

template<class ContainerAllocator>
struct DataType< ::vector_map::road_marking_<ContainerAllocator> >
{
  static const char* value()
  {
    return "vector_map/road_marking";
  }

  static const char* value(const ::vector_map::road_marking_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::vector_map::road_marking_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 id\n\
int32 lane_id\n\
int32 category\n\
int32 w_id\n\
";
  }

  static const char* value(const ::vector_map::road_marking_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::vector_map::road_marking_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.id);
      stream.next(m.lane_id);
      stream.next(m.category);
      stream.next(m.w_id);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct road_marking_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::vector_map::road_marking_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::vector_map::road_marking_<ContainerAllocator>& v)
  {
    s << indent << "id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.id);
    s << indent << "lane_id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.lane_id);
    s << indent << "category: ";
    Printer<int32_t>::stream(s, indent + "  ", v.category);
    s << indent << "w_id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.w_id);
  }
};

} // namespace message_operations
} // namespace ros

#endif // VECTOR_MAP_MESSAGE_ROAD_MARKING_H
